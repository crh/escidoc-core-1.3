<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ CDDL HEADER START
  ~
  ~ The contents of this file are subject to the terms of the Common Development and Distribution License, Version 1.0
  ~ only (the "License"). You may not use this file except in compliance with the License.
  ~
  ~ You can obtain a copy of the license at license/ESCIDOC.LICENSE or http://www.escidoc.de/license. See the License for
  ~ the specific language governing permissions and limitations under the License.
  ~
  ~ When distributing Covered Code, include this CDDL HEADER in each file and include the License file at
  ~ license/ESCIDOC.LICENSE. If applicable, add the following below this CDDL HEADER, with the fields enclosed by
  ~ brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
  ~
  ~ CDDL HEADER END
  ~
  ~ Copyright 2006-2011 Fachinformationszentrum Karlsruhe Gesellschaft fuer wissenschaftlich-technische Information mbH
  ~ and Max-Planck-Gesellschaft zur Foerderung der Wissenschaft e.V. All rights reserved. Use is subject to license
  ~ terms.
  -->

<section>
	<title>Specifications</title>

	<para>This section details how the eSciDoc infrastructure treats
		identifiers, XML
		elements and attributes and how it handles dates.
	</para>

	<section id="Overview.Identifier">
		<title>eSciDoc Identifier</title>

		<para>Identifiers within eSciDoc base on a subset of Fedora
			identifiers. Identifiers
			are obtained from the Fedora repository. The
			eSciDoc framework checks if
			the prefix configured in Fedora fits to
			the eSciDoc identifier schema. 
	   </para>
		<para>
			eSciDoc identifier consists of a prefix, a serial number and an
			optional version number.
			<code>
				eSciDoc-id ::= &lt;namespace-id&gt; ":" &lt;object-id&gt; [":"
				&lt;version-number&gt; ]
			</code>
		</para>
		<para>
			<code>
				namespace-id ::= 1*( a-z / DIGIT / "-" / "." )
		</code>
		</para>
		<para>
			<code>
				object-id ::= 1*( a-z / DIGIT / "-" / "." / "~" / "_" / escaped-octet )
			</code>
		</para>
		<para>
			<code>
				escaped-octet ::= "%" HEXDIG HEXDIG
		</code>
		</para>
		<para>
			<code>
				version-number ::= 1*( DIGIT )
		</code>
		</para>
		<para>
			The main differences between Fedora identifiers and eSciDoc
			identifiers
			are the restriction to lower case letters and the optional
			resource
			version number. A regular expression for eSciDoc identifier would
			look like this:
		</para>
		<para>
			<code>^([a-z0-9]|-|\.)+:(([a-z0-9])|-|\.|~|_|(%[0-9A-F]{2}))+(:[1-9][0-9]*){0,1}$
			</code>
		</para>

		<para>
			Each resource is unambiguously identified by its identifier, whereas the
			optional version number
			decides about the special version of this resource. If a resource is
			selected without version
			number then the framework returns --depending on the role of the user-- the
			latest (newest) version
			of the resource.    
		</para>
		<para>
			An anonymous user retrieves the latest released version of the resource
			whereas the author of the
			resource receives the latest version. The resource itself denotes if a newer
			version than the
			received representation exists.
		</para>
	</section>

	<section id="Overview.Handling">
		<title>Handling of Elements and Attributes</title>

		<bridgehead>Read-only elements and attributes</bridgehead>

		<para>Some values of elements and attributes which are delivered in
			Retrieve methods cannot be changed in Update methods, nor can they be
			used
			in Create methods. These elements and attributes are marked in the
			schemas
			as "discarded," which means the data delivered (in input) will not be
			used
			in the Update or Create methods but instead will be discarded
			completely,
			without feedback.</para>

		<bridgehead>Optional elements</bridgehead>

		<para>All elements that are marked as "optional" and delivered in
			Retrieve
			methods must be redelivered in an Update method; otherwise, these elements
			will be deleted.</para>

		<bridgehead>Empty elements</bridgehead>

		<para>Some elements may be delivered in Create or Update methods to
			the
			eSciDoc infrastructure with no content. Example:
			&lt;organizational-unit:address&gt;&lt;/organizational-unit:address&gt;.
			In successive Retrieves, such elements will be delivered with no
			content.</para>

		<para>If there is no value available in the object for an optional
			element, the element will not be delivered in a Retrieve method.
		</para>
	</section>

	<section id="Overview.DateFormat">
		<title>Date Format</title>

		<para>
			Dates are always represented using the format
			<code>xs:dateTime</code>
			.
		</para>
	</section>

	<section id="OptimisticLocking">
		<title>Optimistic Locking Strategy</title>

		<para>
			Updates on all objects managed by the eSciDoc infrastructure are
			executed using an
			<emphasis>optimistic locking</emphasis>
			strategy. Anyone
			may retrieve the contents of objects and try to update the data
			afterwards. The update will only be successful if no one has changed
			the
			data in the meantime, however.
		</para>

		<para>
			It is therefore necessary that the input data of the infrastructure
			include the timestamp of the object to update. The timestamp is
			contained
			in the attribute
			<code>last-modification-date</code>
			of the root element
			of the retrieved object.
		</para>

		<para>If only a subresource is updated, the original timestamp of the
			surrounding object must be included as an attribute in the root
			element of
			the subresource.</para>

		<para>
			Every Update method checks that the provided
			<code>last-modification-date</code>
			matches the
			<code>last-modification-date</code>
			currently saved in the system. If
			there is no match, the update is rejected.
		</para>

		<para>Delete methods do not support the optimistic locking
			strategy.</para>
	</section>

	<section id="Overview.XmlHandling3">
		<title>XML Handling</title>

		<section>
			<title>XML Schemas</title>

			<para>An XML schema is a description of a type of XML document,
				typically
				expressed in terms of constraints on the structure and content of
				documents of that type, above and beyond the basic syntactical constraints
				imposed by XML itself. An XML schema provides a view of the document
				type
				at a relatively high level of abstraction.</para>

			<para>All XML documents that are used within the eSciDoc
				Infrastructure,
				either in the form of resource representations or as parameters of method
				invocations, are described by XML schemas. All schemas are written
				in
				W3Câ€™s XML schema language. Because of the already mentioned subtle
				differences between representations for SOAP and REST interfaces,
				there
				are two sets of schemas, one for each API.</para>

			<para>Typically, a resource representation is defined by a nested set
				of
				schemas. Many schemas include other schemas with shared definitions, so
				getting the whole picture may be a little cumbersome if following
				the
				references manually.</para>

			<para>Schemas in eSciDoc are versioned. Every time the representation
				or
				the format of a method parameter changes, a new version of the affected
				schema is published. Schema version numbers are uncoupled from the
				software release versions and from version numbers of other schemas.
				Exceptions are the schemas for properties and structural relations,
				which
				are just lists of unrelated elements and therefore not versioned.
			</para>

			<para>All schemas are part of the eSciDoc Infrastructure software
				distribution packages, and can be found on the eSciDoc website for
				download. All schemas are part of the eSciDoc Infrastructure
				software
				distribution packages, and can be found on the eSciDoc website for
				download. The URL of an XML schema document can be deduced from the
				resource type name and namespace/schema version in the following
				form:</para>

			<para>
				SOAP:
				<literal>https://www.escidoc.org/schemas/soap/&lt;type-name&gt;/&lt;version&gt;/&lt;type-name&gt;.xsd
				</literal>
			</para>

			<para>
				REST:
				<literal>https://www.escidoc.org/schemas/rest/&lt;type-name&gt;/&lt;version&gt;/&lt;type-name&gt;.xsd
				</literal>
			</para>

			<para>The type name and version can be found in the namespace
				declaration
				at the beginning of each XML representation of an eSciDoc resource,
				e.g.
				for an Item:</para>

			<informaltable>
				<tgroup cols="2">
					<colspec colwidth="4.0cm" />

					<colspec colwidth="11.5cm" />

					<tbody>
						<row>
							<entry>Namespace:</entry>

							<entry>http://www.escidoc.de/schemas/item/0.10</entry>
						</row>

						<row>
							<entry>Type name:</entry>

							<entry>item</entry>
						</row>

						<row>
							<entry>Version:</entry>

							<entry>0.9</entry>
						</row>

						<row>
							<entry>Schema URL:</entry>

							<entry>
								<literal>
									<ulink url="https://www.escidoc.org/schemas/soap/item/0.10/item.xsd">https://www.escidoc.org/schemas/soap/item/0.10/item.xsd
									</ulink>
								</literal>
							</entry>
						</row>
					</tbody>
				</tgroup>
			</informaltable>
		</section>

		<section>
			<title>Handling of Special Character Entities in XML</title>

			<para>All XML data passed as parameters to any eSciDoc Infrastructure
				API
				method is internally handled as XML. The respective service will always
				parse and validate the XML structure first before processing it. It
				is
				therefore required to escape special characters (see below for a listing)
				in your XML before sending it to an Infrastructure method. Likewise,
				the
				API will return all XML with special characters encoded as entities.
				Internally, the XML is transformed into a data object before the
				business
				logic is applied. If the result of the method invocation includes parts
				of
				the original XML (e.g., when updating an Item), the XML is serialized
				once
				again from the data object. This may lead to differences between received
				and returned XML structures, including:</para>

			<itemizedlist>
				<listitem>
					<para>changes to namespace prefixes</para>
				</listitem>

				<listitem>
					<para>the position of namespace declarations within the XML
						structure</para>
				</listitem>

				<listitem>
					<para>the replacement of optional entity references by their
						replacement text and vice versa</para>
				</listitem>

				<listitem>
					<para>ignorable white spaces</para>
				</listitem>

				<listitem>
					<para>ordering of attributes</para>
				</listitem>
			</itemizedlist>

			<para>Escaping characters is a common operation in XML handling, as
				is the
				conversion of white space and line breaks. The XML structure returned by
				the infrastructure always represents semantically exactly the same
				content
				as originally passed to the infrastructure, but not necessarily
				bitwise.</para>
		</section>

		<section>
			<title>Optional Entity References</title>

			<para>
				The XML specification (
				<ulink url="http://www.w3.org/TR/REC-xml/">http://www.w3.org/TR/REC-xml/</ulink>
				)
				declares entity references for the following characters:
			</para>

			<itemizedlist>
				<listitem>
					<para>
						<literal>&amp;</literal>
						ampersand
					</para>
				</listitem>

				<listitem>
					<para>
						<literal>&lt;</literal>
						lesser-than
					</para>
				</listitem>

				<listitem>
					<para>
						<literal>&gt;</literal>
						greater-than
					</para>
				</listitem>

				<listitem>
					<para>
						<literal>'</literal>
						single-quote
					</para>
				</listitem>

				<listitem>
					<para>
						<literal>"</literal>
						double-quote
					</para>
				</listitem>
			</itemizedlist>

			<para>
				When used within an XML entity â€“ e.g., element, attribute etc. â€“ the
				ampersand and lesser-than characters must be replaced by their
				entity
				references
				<literal>&amp;amp;</literal>
				and
				<literal>&amp;lt;</literal>
				.
				The replacement of greater-than, single-quote, and double-quote
				characters
				by their entity references is optional, unless required in special
				contexts.
			</para>

			<para>
				If the eSciDoc Infrastructure receives an XML structure as a
				parameter, it will always interpret it as XML and not as bitstream.
				All
				embedded entity references are replaced by their corresponding replacement
				text (for example,
				<literal>&amp;quot;</literal>
				is always replaced by ").
				Because greater-than, single quote, and double quote do not need to be
				escaped, they might appear unescaped in the XML structure received.
				At
				this time, the internal representation contains only the replacement
				text
				and no entity references. Thus, it is impossible for the business logic
				to
				reconstruct which occurrence of any of these three characters was
				originally escaped. Therefore, it is possible that a returned XML
				structure contains a different representation of a character than the
				originally received XML structure. However, this behavior is within
				the
				XML specification and does not change the semantics of the XML
				structure.
				Please see section 2.4, Character Data and Markup, of the XML
				specification at
				<ulink url="http://www.w3.org/TR/REC-xml/">http://www.w3.org/TR/REC-xml/</ulink>
				.
			</para>

			<para>Currently, the eSciDoc Infrastructure always replaces all five
				characters with their corresponding entity reference. If an XML
				structure
				contains an entity reference, the leading ampersand must be escaped.
				Typically, XML authoring tools do this automatically. If the XML
				structure
				is generated manually, however, programmers need to be careful to
				provide
				valid XML.</para>

			<para>Examples:</para>

			<itemizedlist>
				<listitem>
					<para>
						If the string
						<literal>&amp;quot;</literal>
						appears in an XML
						structure, it is an entity reference and it represents a double quote
						(").
					</para>
				</listitem>

				<listitem>
					<para>
						If the string
						<literal>&amp;amp;quot;</literal>
						appears in an
						XML structure, only the beginning
						<literal>&amp;amp;</literal>
						is an
						entity reference representing an ampersand (&amp;). The meaning of the
						entire string is the entity reference for a double-quote
						(
						<literal>&amp;quot;</literal>
						).
					</para>
				</listitem>
			</itemizedlist>
		</section>

		<section>
			<title>Date Format</title>

			<para>
				All dates within resource representations are formatted according to
				<literal>xs:dateTime</literal>
				. The time zone is mandatory and must be
				given either in the form
				<literal>[+|-]hh:mm</literal>
				or in the
				short-hand form Z for UTC (Universal Time Code). This is equally true for
				all other dates, especially the
				<literal>last-modification-date</literal>
				often used as method parameter.
			</para>

			<para>
				Each date must include three digits with fractions of seconds. If
				your operating environment does not provide such fine-grained time
				measurements, please use instead
				<literal>000</literal>
				(three zeros)
				consistently throughout your code.
			</para>

			<para>Example:</para>

			<itemizedlist>
				<listitem>
					<para>
						<literal>last-modification-date="2007-03-13T12:29:17.000+01:00"
						</literal>
					</para>
				</listitem>
			</itemizedlist>
		</section>
	</section>
</section>
