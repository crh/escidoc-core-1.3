<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ CDDL HEADER START
  ~
  ~ The contents of this file are subject to the terms of the Common Development and Distribution License, Version 1.0
  ~ only (the "License"). You may not use this file except in compliance with the License.
  ~
  ~ You can obtain a copy of the license at license/ESCIDOC.LICENSE or http://www.escidoc.de/license. See the License for
  ~ the specific language governing permissions and limitations under the License.
  ~
  ~ When distributing Covered Code, include this CDDL HEADER in each file and include the License file at
  ~ license/ESCIDOC.LICENSE. If applicable, add the following below this CDDL HEADER, with the fields enclosed by
  ~ brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
  ~
  ~ CDDL HEADER END
  ~
  ~ Copyright 2006-2011 Fachinformationszentrum Karlsruhe Gesellschaft fuer wissenschaftlich-technische Information mbH
  ~ and Max-Planck-Gesellschaft zur Foerderung der Wissenschaft e.V. All rights reserved. Use is subject to license
  ~ terms.
  -->

<section id="Overview.SoapAPI">
  <title>SOAP Application Programming Interface</title>
<section id="Overview.SoapIntroduction">
  <title>Introduction to SOAP</title>

        <para>SOAP, originally defined as Simple Object Access Protocol, is a
        W3C protocol specification for exchanging structured information in the
        implementation of Web Services in computer networks. It relies on
        Extensible Markup Language (XML) as its message format, and usually
        relies on other Application Layer protocols (most notably Remote
        Procedure Call (RPC) and HTTP) for message negotiation and transmission.
        SOAP can form the foundation layer of a web services protocol stack,
        providing a basic messaging framework upon which web services can be
        built. There are various tools available that can generate Java objects
        out of a WSDL file (for example, <literal>wsdl2java</literal> from the
        Apache Axis framework). The response automatically populates these Java
        objects by binding them to the specific responses. This enables an
        application to work with objects instead of XML. However, the objects
        sent back an forth by the eSciDoc Infrastructure on the API level mainly
        consists of XML documents, so the difference to the REST API is rather
        small. </para>
  
        <para>A WSDL file is available for the SOAP API of each service, which
        formally describes the interface in a standardized way. The WSDL files
        are part of the software distribution and retrievable via the local
        installation of the eSciDoc Infrastructure:</para>
  
        <para>Template:
        <literal>http://&lt;host&gt;:&lt;port&gt;/axis/services/&lt;ServiceName&gt;?wsdl</literal></para>
  
        <para>Item Service:
        <literal>http://localhost:8080/axis/service/ItemService?wsdl</literal></para>
</section>

<section id="Overview.BasicResourceOperations">
  <title>Basic Resource Operations</title>
        <para>Each service interface offers a handler object. The handler object provides 
        methods to create, retrieve, update, and delete resources and their subresources. 
        With the exception of the <literal>create()</literal> method, all methods require 
        a unique identifier to specify the resource to be handled. For the SOAP API, the
        identifier is the object id (<literal>objid</literal>).</para>

  <para>In case of an error, the answer contains a HTTP status code indicating
  the type of the error, a short description, and an XML representation of the
  error.</para>

  <formalpara>
    <title>Retrieve a resource</title>

    <para>Invoke the <literal>retrieve()</literal> method with 
    the objid as parameter. The method returns the XML representation of a 
    resource.</para>
  </formalpara>

  <formalpara>
    <title>Create or update a resource</title>

    <para>Invoke the <literal>update()</literal> method with
    the XML representation of the resource. The method returns the XML
representation of the created or updated resource.</para>
  </formalpara>

  <formalpara>
    <title>Delete a resource</title>

    <para>Invoke the <literal>delete()</literal> method with 
    the objid as parameter. The method returns nothing (void).</para>
  </formalpara>
</section>

<section id="Overview.RestErrorHandling">
    <title>Error handling</title>
        <para>Each WSDL file specifies not only the methods
        with their in and out parameters, but possible exceptions an well. A
        Java application can directly handle errors raised by the eSciDoc
        Infrastructure by catching the generated exceptions. See the respective
        method documentation for a list of possible
        exceptions.</para>
</section>
</section>

  <section id="Overview.SubResources">
    <title>Sub-Resources</title>

    <para>The standard representations of objects are sometimes cumbersome to
    handle and contain much more information than needed. If, for example, a
    user is interested in just one metadata record, there is no need to
    retrieve the representation of the entire object. It is therefore possible
    to work with just a selected part of the representation, a so-called
    'sub-resource'. Such a part of an object may be the object properties, one
    of the metadata records, or a Component. Accessing sub-resources differ
    between the REST and the SOAP API.</para>

    <para>The REST API provides an XLink Simple Pointer to each retrievable
    part of an object. If you look at the representation of a resource, you
    will find several places with resource identifiers (the combination of an
    <literal>xlink:title</literal>, an <literal>xlink:type</literal>, and an
    <literal>xlink:href</literal> attribute), e.g. for metadata records. If
    you are requesting such a part of a resource via the URI declared in the
    <literal>xlink:href</literal> attribute, you will get back just this part
    of the resource. The SOAP API provides the same functionality with several
    specific methods, which allow to work with sub-resources, e.g.
    <literal>retrieveMdRecord()</literal>.</para>
  </section>

  <section id="Overview.VirtualResources">
    <title>Virtual Resources</title>

    <para>In addition to resources and related sub-resources, several services
    of the eSciDoc Infrastructure support "virtual" resources. Virtual
    resources pertain to parts of an object that are not part of the standard
    representation. A list of available virtual resources can be retrieved by 
    the <code>retrieveResources()</code>.</para>

    <para>One example of a virtual resource is the version history is an Item
    or a Container. Each modification to one of the resources will be tracked
    as an event in the version history, which may become rather lengthy. In
    normal application contexts, this information is rarely needed. Therefore,
    the Object Manager provides access to it by means of a virtual
    resource.</para>

    <para>The SOAP API provides the method <code>retrieveVersionHistory()</code> 
    for this task.</para>
  </section>
