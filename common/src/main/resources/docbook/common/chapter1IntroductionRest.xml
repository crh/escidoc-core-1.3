<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ CDDL HEADER START
  ~
  ~ The contents of this file are subject to the terms of the Common Development and Distribution License, Version 1.0
  ~ only (the "License"). You may not use this file except in compliance with the License.
  ~
  ~ You can obtain a copy of the license at license/ESCIDOC.LICENSE or http://www.escidoc.de/license. See the License for
  ~ the specific language governing permissions and limitations under the License.
  ~
  ~ When distributing Covered Code, include this CDDL HEADER in each file and include the License file at
  ~ license/ESCIDOC.LICENSE. If applicable, add the following below this CDDL HEADER, with the fields enclosed by
  ~ brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
  ~
  ~ CDDL HEADER END
  ~
  ~ Copyright 2006-2011 Fachinformationszentrum Karlsruhe Gesellschaft fuer wissenschaftlich-technische Information mbH
  ~ and Max-Planck-Gesellschaft zur Foerderung der Wissenschaft e.V. All rights reserved. Use is subject to license
  ~ terms.
  -->

<section>
  <title>Introduction</title>

  <para>Each resource has a URI represented via XLink and is accessible with
  Hyper Text Transfer Protocol (HTTP). HTTP request methods are used to
  distinguish between create (PUT), update (PUT), retrieve (GET), and delete
  (DELETE). In order to create or update a resource, the representation of
  that resource as a valid XML document must be sent in the request body.
  There is a restriction of the total size of that body.</para>

  <para>In case of an error, the answer contains a HTTP status code indicating
  the type of the error, a short description, and an XML representation of the
  error. The XML representation of an error is described in an XMLSchema [TODO
  document name].</para>

  <formalpara>
    <title>Retrieve a resource</title>

    <para>Send a HTTP GET request to the URI of the resource. The response to
    a HTTP GET request contains the HTTP status code 200 ("OK") and the XML
    representation of the resource in the response body.</para>
  </formalpara>

  <formalpara>
    <title>Create or Update a resource</title>

    <para>Send a HTTP PUT request to the URI of the resource. The body of the
    request must contain the XML representation of the resource, and the value
    of the content type header of the HTTP PUT request must be "text/xml." The
    HTTP status code of the response to a HTTP PUT request is 200 ("OK"). The
    response body contains the new or updated XML representation of the
    resource.</para>
  </formalpara>

  <formalpara>
    <title>Delete a resource</title>

    <para>Send a HTTP DELETE request to the URI of the resource. If
    successful, the response to the HTTP DELETE request contains the HTTP
    status code 204 ("NO CONTENT") and no body.</para>
  </formalpara>

  <formalpara>
    <title>Error handling</title>

    <para>A REST request is submitted to eSciDoc by using the HTTP Protocol.
    If the execution of a request is erroneous, an exception is thrown. When
    this happens, the HTTP response status code is set to the HTTP status code
    defined for the exception - for example, "404" if a resource was not found
    by the infrastructure. The text of the HTTP response will be an XML
    representation of the exception. The possible status codes, combined with
    the exception, are listed in the documentation of a REST method call. In
    the rare case that the infrastructure is not able to map a request to a
    specific resource method, a MethodNotFoundException (404, "Method Not
    Found") is thrown and sent back in the HTTP response. For further
    information on error and exception handling inside the infrastructure,
    please refer to the concept on exception handling: <xref
    linkend="MHo06" /> .</para>
  </formalpara>

  <section id="Overview.AccessToResourceHandlers">
    <title>Access to the Resource Handlers</title>

    <para>All supported resources are accessible via REST. All available
    methods to manipulate a certain resource via REST are described in the
    document dedicated to this resource.</para>
  </section>

  <section id="Overview.ResourceAndTaskMethods">
    <title>Resource and Task Oriented Methods</title>

    <para>With REST, most components of the infrastructure work with resources
    - for example, the Update of an item. The update method addresses a
    specific resource by its ID and an updated XML representation of the
    specified Item. The XML representation includes all necessary information
    to perform the update, for example, the timestamp of the latest
    modification required for optimistic locking.</para>

    <para>In contrast to the resource oriented methods, there are some
    exercises which are difficult to fulfill by performing a normal update.
    These methods are named task oriented methods. Possible tasks are the
    submission or the release of an item or container as well as the moving of
    objects from one context to another or the filtered retrieval of objects.
    To be able to perform a task oriented method, additional parameters are
    necessary. Examples are the filter criteria for a filtering retrieval
    method or the timestamp of the latest modification of the manipulated
    resource for optimistic locking purposes. These parameters are summarized
    in a special task-param XML structure. Examples are given in the
    documentation.</para>
  </section>

  <section id="Overview.WorkWithSubResources">
    <title>Working with Sub Resources</title>

    <para>Every resource offers the ability to access its data by addressing
    subresources. For example, it is possible to retrieve and update a single
    metadata record of an item instead of retrieving and updating the whole
    Item to correct a typo in the title.</para>

    <para>To achieve the best performance in working with the eSciDoc
    infrastructure and to minimize the resulting overhead, it is helpful to
    use the provided subresources to retrieve and update the required
    data.</para>

    <para></para>
  </section>

  <section id="Overview.VirtualResources">
    <title>Virtual Resources</title>

    <para>In addition to the resources and related subresources, the eSciDoc
    infrastructure supports virtual resources. These resources are not part of
    the stored objects but are created by the infrastructure on
    request.</para>

    <para>These resources are listed in the section "resources" of the XML
    representations of each eSciDoc object.</para>

    <para>Examples:</para>

    <para>"/ir/container/container-id/struct-map" is a sub resource of a container.
    In addition there exists a sub resource
    "/ir/container/container-id/resources/members/filter" which is a filtered 
    struct-map with additional data. The member-filter is not stored in the container
    but created when the subresource is requested.</para>

    <para>The infrastructure eSciDoc may support other XML representations of
    objects, such as METS. Such resources will also be listed in the section
    Resource</para>
  </section>
</section>
