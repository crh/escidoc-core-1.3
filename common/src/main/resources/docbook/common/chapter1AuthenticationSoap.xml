<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ CDDL HEADER START
  ~
  ~ The contents of this file are subject to the terms of the Common Development and Distribution License, Version 1.0
  ~ only (the "License"). You may not use this file except in compliance with the License.
  ~
  ~ You can obtain a copy of the license at license/ESCIDOC.LICENSE or http://www.escidoc.de/license. See the License for
  ~ the specific language governing permissions and limitations under the License.
  ~
  ~ When distributing Covered Code, include this CDDL HEADER in each file and include the License file at
  ~ license/ESCIDOC.LICENSE. If applicable, add the following below this CDDL HEADER, with the fields enclosed by
  ~ brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
  ~
  ~ CDDL HEADER END
  ~
  ~ Copyright 2006-2011 Fachinformationszentrum Karlsruhe Gesellschaft fuer wissenschaftlich-technische Information mbH
  ~ and Max-Planck-Gesellschaft zur Foerderung der Wissenschaft e.V. All rights reserved. Use is subject to license
  ~ terms.
  -->

<section id="Overview.AaSoap">
	<title>Authentication and Authorization</title>

  <para>Access to most of the eSciDoc services is protected. User requests
    have to be authorized before they are granted. Exceptions are the 
    Search service and the Statistic Data service, which are unprotected.
  </para>
     
	  <para>
  	After a successful authentication, the Authentication and Authorization 
  	Manager returns an eSciDoc user handle in the response, 
    which has to be provided by the application with every subsequent 
    method invocation throughout the user session. The eSciDoc user handle 
    expires after a user-definable period of inacitivty. This period may
    be set in the <literal>escidoc-core.custom.properties</literal> 
    configuration file.
  </para>

		<para>
			The SOAP interface uses Apache WSS4J<footnote id="wss4j"><para>see 
			http://ws.apache.org/wss4j/</para></footnote> that implements the 
			OASIS Web Services Security (WS-Security) standard<footnote 
		  id="WsSecurity"><para>defined by the OASIS Web Services Security TC, 
		  see http://www.oasis-open.org/committees/tc_home.php?wg_abbrev=wss</para>
		  </footnote> to protect the access to the methods of the base services.
			A technical user name (<code>eSciDocUser</code>) and the eSciDoc user
			handle that identifies the User Account has to be provided using the
			<code>UsernameToken</code> parameters. The technical user name has to 
			be provided in the user name parameter (<code>user</code>), and the 
			eSciDoc user handle has to be provided in the password parameter.
		</para>
		<para>
			The deployment descriptor of a client should look like
			the following example:
			<programlisting><![CDATA[
<deployment xmlns="http://xml.apache.org/axis/wsdd/" 
    xmlns:java="http://xml.apache.org/axis/wsdd/providers/java">
  <transport name="http" 
      pivot="java:org.apache.axis.transport.http.HTTPSender"/>
  <globalConfiguration >
    <requestFlow >
      <handler type="java:org.apache.ws.axis.security.WSDoAllSender">
        <parameter name="action" value="UsernameToken"/>
        <parameter name="passwordCallbackClass" 
            value="de.escidoc.core.test.security.client.PWCallback"/>
        <parameter name="passwordType" value="PasswordText"/>
        <parameter name="user" value="eSciDocUser"/>
        <parameter name="addUTElement" value="Nonce Created" />
      </handler>
    </requestFlow >
  </globalConfiguration >
</deployment>
			]]></programlisting>
		</para>
		<para>
			The <code>passwordCallbackClass</code> should point to the client's 
			implementation of a (password) callback handler. This handler 
			implementation has to determine the eSciDoc user handle and inject 
			it into the request as the password parameter.
		</para>
		<para>
			In case of a failed authentication or authorization, the services 
			throw one of the following exceptions:
			<itemizedlist>
				<listitem>
			    <code>de.escidoc.core.common.exceptions.application.security.AuthenticationException</code>
				</listitem>

				<listitem>
			    <code>de.escidoc.core.common.exceptions.application.security.AuthorizationException</code>
				</listitem>
			</itemizedlist>
			These exceptions include the location of the eSciDoc
			user management wrapper that enables the login of the
			user. This location can be retrieved from the exception
			by calling the getter method
			<code>getRedirectLocation()</code>.
		</para>

  <para>
  	<informaltable frame="topbot" colsep="0">
      <tgroup cols="2">
      <colspec colwidth="2.5cm"/>
      <colspec colwidth="12.3cm"/>
        <tbody>
          <row rowsep="0">
            <entry>
            	<inlinemediaobject>
                <imageobject>
                  <imagedata depth="2.0cm" fileref="note.png" />
                </imageobject>
              </inlinemediaobject>
            </entry>
 
            <entry>
            	<para><emphasis role="bold">Hint</emphasis></para>
              <para>The eSciDoc user management wrapper provides the
			          login of the user via REST, only (for futher details,
			          please refer to the Authentication and Authorization 
			          Manager API documentation.
              </para>
            </entry>
          </row>
        </tbody>
      </tgroup>
    </informaltable>
  </para>
</section>
