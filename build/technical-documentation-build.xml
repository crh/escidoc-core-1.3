<?xml version="1.0" encoding="UTF-8"?>
<!--
  ~ CDDL HEADER START
  ~
  ~ The contents of this file are subject to the terms of the Common Development and Distribution License, Version 1.0
  ~ only (the "License"). You may not use this file except in compliance with the License.
  ~
  ~ You can obtain a copy of the license at license/ESCIDOC.LICENSE or http://www.escidoc.de/license. See the License
  ~ for the specific language governing permissions and limitations under the License.
  ~
  ~ When distributing Covered Code, include this CDDL HEADER in each file and include the License file at
  ~ license/ESCIDOC.LICENSE. If applicable, add the following below this CDDL HEADER, with the fields enclosed by
  ~ brackets "[]" replaced with your own identifying information: Portions Copyright [yyyy] [name of copyright owner]
  ~
  ~ CDDL HEADER END
  ~
  ~ Copyright 2006-2011 Fachinformationszentrum Karlsruhe Gesellschaft fuer wissenschaftlich-technische Information mbH
  ~ and Max-Planck-Gesellschaft zur Foerderung der Wissenschaft e.V. All rights reserved. Use is subject to license
  ~ terms.
  -->

<project name="eSciDoc Documentation" default="build-all-filtered" basedir="..">

	<property file="build/escidoc-build.properties" />
	<property file="build/escidoc-build.default.properties" />
	<tstamp>
		<format property="build.date" pattern="dd.MM.yyyy" />
	</tstamp>

	<property name="build.version" value="${version}.${label}" />

	<property name="fop-0.93.install.dir" value="build/lib/fop-0.93" />
	<property name="saxon-6.5.5.install.dir" value="build/lib/saxon-6.5.5" />

	<property name="content-type-document" value="eSciDoc_Functional_Specification_CTM_ContentType_v" />
	<property name="aa-tec-spec-document" value="eSciDoc_Technical_Specification_AA_AaComponent_v" />

	<property name="content-type-version" value="1.9.4" />
	<property name="aa-tec-spec-version" value="2.0.0" />

	<property name="src.docbook.dir" value="${basedir}/common/src/de/escidoc/core/common/documentation/docbook" />
	<property name="gen.docbook.dir" value="${basedir}/common/gen/docbook/gen" />
	<property name="result.docbook.dir" value="${basedir}/common/gen/docbook" />
	<property name="gen.pdf.dir" value="${basedir}/common/gen/docbook/gen" />
	<property name="publish.dir" value="Y:/docs/04_Infrastructure/05_Functional_Designs" />
	<property name="includeErrors" value="true" />
	<property name="escidoc.logo" value="escidoc-logo.jpg" />

	<property name="prefix.full" value="full-" />
	<property name="prefix.filtered" value="" />

	<property name="xslt.schemas.src.dir" value="escidoc-core.ear/escidoc-core.war/xsd" />
	<property name="xslt.src.dir" value="escidoc-core.ear/escidoc-core.war/xsl" />
	<property name="xslt.schemas.docu.build.dir" value="${gen.docbook.dir}" />

	<tstamp>
		<format property="buildtime" pattern="MMdd-hhmm" />
	</tstamp>

	<path id="classpath">
		<fileset dir="${fop-0.93.install.dir}" includes="**/*.jar" />
		<fileset dir="${saxon-6.5.5.install.dir}" includes="**/*.jar" />
		<fileset dir="build/lib" includes="**/log4j*.jar" />
		<fileset dir="escidoc-core.ear/META-INF/lib" includes="**/*.jar" />
		<dirset dir="escidoc-core.ear" includes="**/*.jar" />
		<dirset dir="build" includes="docbook/**/*" />
		<dirset dir="common" includes="**/*" />
	</path>

	<target name="clean">
		<delete dir="${gen.docbook.dir}" failonerror="false" />
		<delete dir="${result.docbook.dir}" failonerror="false" />
	</target>

	<target name="prepare">
		<mkdir dir="${gen.docbook.dir}" />
		<mkdir dir="${result.docbook.dir}" />
		<copy todir="${gen.docbook.dir}">
			<fileset includes="${escidoc.logo}" dir="${src.docbook.dir}" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset includes="note.png" dir="${src.docbook.dir}" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${src.docbook.dir}/common" includes="*.xml" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${src.docbook.dir}/om" includes="*.xml" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${src.docbook.dir}/oum" includes="*.xml" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${src.docbook.dir}/sb" includes="*.xml" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${src.docbook.dir}/sm" includes="*.xml" />
		</copy>
		<copy todir="${gen.docbook.dir}">
			<fileset dir="${src.docbook.dir}/cmm" includes="*.xml" />
		</copy>

		<copy todir="${gen.docbook.dir}" flatten="true">
			<fileset dir="${src.docbook.dir}" includes="*/*.xml" excludes="templates/*" />
		</copy>
	</target>


	<target name="build-all" depends="clean, prepare, all-other-filtered, all-other-full, aa-tec-spec" />
	<target name="build-all-filtered" depends="clean, prepare, all-other-filtered, aa-tec-spec" />
	<target name="build-all-full" depends="clean, prepare,all-other-full, aa-tec-spec" />
	<target name="build-aa-tec-spec" depends="clean, prepare, aa-tec-spec" />

	<target name="all-other-filtered" depends="content-type-filtered" />
	<target name="all-other-full" depends="content-type-full" />

	<target name="content-type-filtered">
		<antcall target="create-content-type">
			<param name="checkVisibility" value="true" />
			<param name="prefix" value="${prefix.filtered}" />
		</antcall>
	</target>

	<target name="content-type-full">
		<antcall target="create-content-type">
			<param name="checkVisibility" value="false" />
			<param name="prefix" value="${prefix.full}" />
		</antcall>
	</target>

	<target name="create-content-type">
		<antcall target="create-component">
			<param name="component" value="cmm" />
			<param name="descriptor" value="contenttype" />
			<param name="checkVisibility" value="${checkVisibility}" />
			<param name="includeErrors" value="true" />
			<param name="document" value="${content-type-document}" />
			<param name="prefix" value="${prefix}" />
			<param name="version" value="${content-type-version}" />
		</antcall>
	</target>

	<target name="aa-tec-spec">
		<antcall target="create-aa-tec-spec">
			<param name="checkVisibility" value="false" />
			<param name="prefix" value="${prefix.full}" />
		</antcall>
	</target>

	<target name="create-aa-tec-spec">
		<antcall target="create-tec-spec">
			<param name="document" value="${aa-tec-spec-document}" />
			<param name="prefix" value="${prefix}" />
			<param name="version" value="${aa-tec-spec-version}" />
		</antcall>
	</target>

	<target name="create-tec-spec">
		<antcall target="create-fo">
			<param name="document" value="${document}" />
		</antcall>
		<antcall target="create-pdf">
			<param name="document" value="${document}" />
		</antcall>
		<antcall target="create-rtf">
			<param name="document" value="${document}" />
		</antcall>
		<copy file="${gen.docbook.dir}/${document}.pdf" tofile="${result.docbook.dir}/${prefix}${document}${version}-${buildtime}.pdf" failonerror="false" />
		<!--<copy file="${gen.docbook.dir}/${document}.rtf" tofile="${result.docbook.dir}/${prefix}${document}${version}-${buildtime}.rtf" failonerror="false" />-->
	</target>

	<target name="create-component">
		<antcall target="create-docbook">
			<param name="component" value="${component}" />
			<param name="descriptor" value="${descriptor}" />
			<param name="checkVisibility" value="${checkVisibility}" />
			<param name="includeErrors" value="${includeErrors}" />
		</antcall>
		<antcall target="create-fo">
			<param name="document" value="${document}" />
		</antcall>
		<antcall target="create-pdf">
			<param name="document" value="${document}" />
		</antcall>
		<copy file="${gen.docbook.dir}/${document}.pdf" tofile="${result.docbook.dir}/${prefix}${document}${version}-${buildtime}.pdf" failonerror="false" />

		<!--<antcall target="create-rtf">
				<param name="document" value="${document}" />
			</antcall>
			<copy file="${gen.docbook.dir}/${document}.rtf" tofile="${result.docbook.dir}/${prefix}${document}${version}-${buildtime}.rtf" failonerror="false" />-->
	</target>

	<target name="create-docbook">
		<taskdef name="GenDocbook" classname="de.escidoc.core.common.documentation.Descriptor" classpathref="classpath" />
		<GenDocbook descriptor="/de/escidoc/core/${component}/servlet/${descriptor}.xml" outputPath="${gen.docbook.dir}" includeErrors="${includeErrors}" checkVisibility="${checkVisibility}" />
	</target>

	<target name="create-fo">
		<echo level="info">Generating ${gen.docbook.dir}/${document}.fo</echo>
		<java classname="com.icl.saxon.StyleSheet" classpathref="classpath" output="${gen.docbook.dir}/${document}-create-fo.log" fork="true" dir="${gen.docbook.dir}/..">
			<jvmarg line="-Xmx512M -Xms64m" />
			<jvmarg line="-Dorg.apache.xerces.xni.parser.XMLParserConfiguration=org.apache.xerces.parsers.XIncludeParserConfiguration" />
			<arg value="-o" />
			<arg value="${gen.docbook.dir}/${document}.fo" />
			<arg value="${gen.docbook.dir}/${document}.xml" />
			<arg value="${basedir}/build/docbook/EscidocDocbook.xsl" />
		</java>
		<replace file="${gen.docbook.dir}/${document}.fo" token="{BUILD.VERSION}" value="${build.version}" />
		<replace file="${gen.docbook.dir}/${document}.fo" token="{BUILD.DATE}" value="${build.date}" />
	</target>

	<target name="create-rtf">
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop-0.93.install.dir}" includes="**/*.jar" />
			</classpath>
		</taskdef>
		<echo level="info">Creating ${gen.pdf.dir}/${document}.rtf</echo>
		<fop fofile="${gen.docbook.dir}/${document}.fo" format="rtf" outfile="${gen.pdf.dir}/${document}.rtf" />
	</target>

	<target name="create-pdf">
		<taskdef name="fop" classname="org.apache.fop.tools.anttasks.Fop">
			<classpath>
				<fileset dir="${fop-0.93.install.dir}" includes="**/*.jar" />
			</classpath>
		</taskdef>
		<echo level="info">Creating ${gen.pdf.dir}/${document}.pdf</echo>
		<fop fofile="${gen.docbook.dir}/${document}.fo" outfile="${gen.pdf.dir}/${document}.pdf" format="pdf" />
	</target>

	<target name="xslt-transformation">
		<xslt in="${input-filename}" out="${output-filename}" extension="${extension}" style="${xslt.stylesheet}" force="true">
			<classpath location="lib/saxon8.jar" />
		</xslt>
	</target>
</project>




