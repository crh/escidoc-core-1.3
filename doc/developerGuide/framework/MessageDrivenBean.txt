Anlegen einer MessageQueue + MessageDrivenBean, die auf dieser Queue lauscht.

Neue Queue anlegen:
Datei <component>/src/<sonstwas>-service.xml anlegen mit:
<server>
  <mbean code="org.jboss.mq.server.jmx.Queue"
         name="jboss.mq.destination:service=Queue,name=WmMessageQueue">
    <depends optional-attribute-name="DestinationManager">
      jboss.mq:service=DestinationManager
    </depends>
    <depends optional-attribute-name="SecurityManager">
      jboss.mq:service=SecurityManager
    </depends>
    <attribute name="SecurityConf">
    	<security>
    		<role name="Administrator" read="true" write="true" create="true"/>
    	</security>
    </attribute>
  </mbean>
</server>

wird dann beim deploy im jboss automatisch angelegt

-Queue in SPRING registrieren:
in <component>/src/META-INF/merge/spring-beans.xml:
<bean id="jbpmMessageQueue"
	class="org.springframework.jndi.JndiObjectFactoryBean">
	<property name="jndiName">
		<value>queue/WmMessageQueue</value>
	</property>
</bean> 
	

Implementierung der MessageDrivenBean:
-MDB in package <component>.ejb
-Im xdoclet-header wird benutzte message-queue und mdb definiert:
 * @ejb.bean name="WmMessageBean" display-name="WmMessageBean"
 *           description="Handles Workflow Messages"
 *           destination-type="javax.jms.Queue"
 *           acknowledge-mode="Auto-acknowledge"
 * @jboss.destination-jndi-name name="queue/WmMessageQueue"
 * @jboss.container-configuration name="Workflow Message Driven Bean"
 
 Ausserdem muss der xdoclet-Tag @ejb.security-identity run-as="Administrator"
 benutzt werden, wenn von der MDB aus andere EJBs in unserem system aufgerufen werden.

-@jboss.destination-jndi-name beinhaltet den jndi-namen der Queue wie in spring-beans.xml definiert.
-@jboss.container-configuration beinhaltet den Namen der bean-configuration (wird in Datei jboss-container.xml benutzt)

Konfiguration der MDB in der Datei <component>/src/META-INF/merge/jboss-container.xml
Note: Der container-name in der container-configuration muss mit dem xdoclet-tag @jboss.container-configuration
in der MessageDrivenBean übereinstimmen. (/container-configurations/container-configuration/container-name)
Note: Die proxy-factory der invoker-proxy-bindings muss die Klasse
de.escidoc.core.common.util.security.mq.EscidocJmsContainerInvoker sein.
Diese Klasse holt sich user/password aus den escidoc-core.properties und verbindet sich damit mit der queue.

	
Ansprechen der Queue:
-In der Klasse, die in die Queue schreibt wird die Queue und die QueueConnectionFactory 
 über spring-wireing gesetzt.
-Die QueueConnectionFactory ist in der springbean-definition im common-package definiert.
 (common/src/META-INF/merge/spring-beans.xml)
 Diese QueueConnectionFactory ist nur lokal ansprechbar!
 Sie wird als springbean mit dem namen common.local.QueueConnectionFactory in die Klasse eingebunden.

-mit Queue und queueConnectionFactory wird ein MessageSender-Objekt erzeugt:
 user/password stehen in der escidoc-core.properties 
 (escidoc-core.queue.user + escidoc-core.queue.password)
            qc = queueConnectionFactory.createQueueConnection(user, password);
            qs = qc.createQueueSession(false,
                javax.jms.Session.AUTO_ACKNOWLEDGE);
            wmMessageSender = qs.createSender(wmMessageQueue);

-über den sender kann jetzt eine Message in die Queue gelegt werden:
            ObjectMessage message = qs.createObjectMessage();
            message.setLongProperty("taskInstanceId", taskInstanceId
                .longValue());
            message.setStringProperty("transitionName", leavingTransition);
            message.setStringProperty("methodName",
               "executeResumedWorkflowInstance");
            wmMessageSender.send(message);

Lesen aus der Queue:
-die MDB lauscht auf der Queue, holt sich die Message sofort und bearbeitet sie:
    public void onMessage(final Message msg) {
        try {
            String methodName = msg.getStringProperty("methodName");
            String transitionName = msg.getStringProperty("transitionName");
            long taskInstanceId = msg.getLongProperty("taskInstanceId");
            ...
        }
        catch (Exception e) {
            throw new ApplicationServerSystemException(e);
        }
    }
